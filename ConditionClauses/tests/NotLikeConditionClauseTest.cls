@isTest
public class NotLikeConditionClauseTest {
  @isTest
  static void testBuild_WhenValueIsValidString_ThenReturnsNotLikeClause() {
    // Arrange
    Schema.SObjectType sObjectType = Account.getSObjectType();
    Map<String, Schema.SObjectField> fieldMap = sObjectType.getDescribe().fields.getMap();
    IConditionClause clause = new NotLikeConditionClause(sObjectType, fieldMap, 'Name', '%Test Corp%');

    // Act
    String result = clause.build();

    // Assert
    Assert.areEqual(
      '(NOT Name LIKE \'%Test Corp%\')',
      result,
      'The NOT LIKE condition string should be correctly formatted.'
    );
  }

  @isTest
  static void testBuild_WhenValueIsNull_ThenThrowException() {
    // Arrange
    Schema.SObjectType sObjectType = Account.getSObjectType();
    Map<String, Schema.SObjectField> fieldMap = sObjectType.getDescribe().fields.getMap();
    IConditionClause clause = new NotLikeConditionClause(sObjectType, fieldMap, 'Name', null);

    // Act & Assert
    try {
      clause.build();
      Assert.fail('Expected a QueryException to be thrown for null value.');
    } catch (QueryException e) {
      String expectedMessage = 'Value cannot be null for NOT LIKE condition. field: Name';
      Assert.areEqual(expectedMessage, e.getMessage(), 'The exception message should match.');
    }
  }

  @isTest
  static void testImmutability_WhenOverrideMetaData_ThenReturnsNewInstance() {
    // Arrange
    Schema.SObjectType accountSObjectType = Account.getSObjectType();
    Map<String, Schema.SObjectField> accountFieldMap = accountSObjectType.getDescribe().fields.getMap();
    IConditionClause originalClause = new NotLikeConditionClause(
      accountSObjectType,
      accountFieldMap,
      'Name',
      'Test%'
    );

    // Act
    Schema.SObjectType oppSObjectType = Opportunity.getSObjectType();
    Map<String, Schema.SObjectField> oppFieldMap = oppSObjectType.getDescribe().fields.getMap();
    IConditionClause newClause = originalClause.overrideMetaData(oppSObjectType, oppFieldMap);

    // Assert
    Assert.areNotEqual(originalClause, newClause, 'A new instance should be returned.');
    Assert.areEqual(
      '(NOT Name LIKE \'Test%\')',
      originalClause.build(),
      'Original instance should not be modified.'
    );
  }

  @isTest
  static void testImmutability_WhenOverrideField_ThenReturnsNewInstanceWithNewField() {
    // Arrange
    Schema.SObjectType sObjectType = Account.getSObjectType();
    Map<String, Schema.SObjectField> fieldMap = sObjectType.getDescribe().fields.getMap();
    IConditionClause originalClause = new NotLikeConditionClause(sObjectType, fieldMap, 'Name', 'Test%');

    // Act
    IConditionClause newClause = originalClause.overrideField('BillingStreet');

    // Assert
    Assert.areNotEqual(originalClause, newClause, 'A new instance should be returned.');
    Assert.areEqual(
      '(NOT Name LIKE \'Test%\')',
      originalClause.build(),
      'Original instance should not be modified.'
    );
    Assert.areEqual(
      '(NOT BillingStreet LIKE \'Test%\')',
      newClause.build(),
      'New instance should reflect the overridden field name.'
    );
  }
}
